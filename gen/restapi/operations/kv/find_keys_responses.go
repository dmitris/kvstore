// Code generated by go-swagger; DO NOT EDIT.

package kv

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/go-openapi/kvstore/gen/models"
)

// FindKeysOKCode is the HTTP code returned for type FindKeysOK
const FindKeysOKCode int = 200

/*FindKeysOK list the keys known to this datastore

swagger:response findKeysOK
*/
type FindKeysOK struct {
	/*The request id this is a response to
	  Required: true
	*/
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload []string `json:"body,omitempty"`
}

// NewFindKeysOK creates FindKeysOK with default headers values
func NewFindKeysOK() *FindKeysOK {
	return &FindKeysOK{}
}

// WithXRequestID adds the xRequestId to the find keys o k response
func (o *FindKeysOK) WithXRequestID(xRequestID string) *FindKeysOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the find keys o k response
func (o *FindKeysOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the find keys o k response
func (o *FindKeysOK) WithPayload(payload []string) *FindKeysOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the find keys o k response
func (o *FindKeysOK) SetPayload(payload []string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindKeysOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]string, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*FindKeysDefault Error

swagger:response findKeysDefault
*/
type FindKeysDefault struct {
	_statusCode int
	/*The request id this is a response to
	  Required: true
	*/
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewFindKeysDefault creates FindKeysDefault with default headers values
func NewFindKeysDefault(code int) *FindKeysDefault {
	if code <= 0 {
		code = 500
	}

	return &FindKeysDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the find keys default response
func (o *FindKeysDefault) WithStatusCode(code int) *FindKeysDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the find keys default response
func (o *FindKeysDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithXRequestID adds the xRequestId to the find keys default response
func (o *FindKeysDefault) WithXRequestID(xRequestID string) *FindKeysDefault {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the find keys default response
func (o *FindKeysDefault) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the find keys default response
func (o *FindKeysDefault) WithPayload(payload *models.Error) *FindKeysDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the find keys default response
func (o *FindKeysDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindKeysDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
