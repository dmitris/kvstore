// Code generated by go-swagger; DO NOT EDIT.

package kv

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetEntryParams creates a new GetEntryParams object
// no default values defined in spec.
func NewGetEntryParams() GetEntryParams {

	return GetEntryParams{}
}

// GetEntryParams contains all the bound params for the get entry operation
// typically these are obtained from a http.Request
//
// swagger:parameters getEntry
type GetEntryParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: header
	*/
	IfNoneMatch *string
	/*A unique UUID for the request
	  Min Length: 1
	  In: header
	*/
	XRequestID *string
	/*The key for a given entry
	  Required: true
	  Min Length: 1
	  In: path
	*/
	Key string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetEntryParams() beforehand.
func (o *GetEntryParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := o.bindIfNoneMatch(r.Header[http.CanonicalHeaderKey("If-None-Match")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindXRequestID(r.Header[http.CanonicalHeaderKey("X-Request-Id")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	rKey, rhkKey, _ := route.Params.GetOK("key")
	if err := o.bindKey(rKey, rhkKey, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindIfNoneMatch binds and validates parameter IfNoneMatch from header.
func (o *GetEntryParams) bindIfNoneMatch(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.IfNoneMatch = &raw

	return nil
}

// bindXRequestID binds and validates parameter XRequestID from header.
func (o *GetEntryParams) bindXRequestID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.XRequestID = &raw

	if err := o.validateXRequestID(formats); err != nil {
		return err
	}

	return nil
}

// validateXRequestID carries on validations for parameter XRequestID
func (o *GetEntryParams) validateXRequestID(formats strfmt.Registry) error {

	if err := validate.MinLength("X-Request-Id", "header", (*o.XRequestID), 1); err != nil {
		return err
	}

	return nil
}

// bindKey binds and validates parameter Key from path.
func (o *GetEntryParams) bindKey(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Key = raw

	if err := o.validateKey(formats); err != nil {
		return err
	}

	return nil
}

// validateKey carries on validations for parameter Key
func (o *GetEntryParams) validateKey(formats strfmt.Registry) error {

	if err := validate.MinLength("key", "path", o.Key, 1); err != nil {
		return err
	}

	return nil
}
