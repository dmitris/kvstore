package kv

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetEntryParams creates a new GetEntryParams object
// with the default values initialized.
func NewGetEntryParams() *GetEntryParams {
	var ()
	return &GetEntryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetEntryParamsWithTimeout creates a new GetEntryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetEntryParamsWithTimeout(timeout time.Duration) *GetEntryParams {
	var ()
	return &GetEntryParams{

		timeout: timeout,
	}
}

// NewGetEntryParamsWithContext creates a new GetEntryParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetEntryParamsWithContext(ctx context.Context) *GetEntryParams {
	var ()
	return &GetEntryParams{

		Context: ctx,
	}
}

// NewGetEntryParamsWithHTTPClient creates a new GetEntryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetEntryParamsWithHTTPClient(client *http.Client) *GetEntryParams {
	var ()
	return &GetEntryParams{
		HTTPClient: client,
	}
}

/*GetEntryParams contains all the parameters to send to the API endpoint
for the get entry operation typically these are written to a http.Request
*/
type GetEntryParams struct {

	/*IfNoneMatch*/
	IfNoneMatch *string
	/*XRequestID
	  A unique UUID for the request

	*/
	XRequestID *string
	/*Key
	  The key for a given entry

	*/
	Key string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get entry params
func (o *GetEntryParams) WithTimeout(timeout time.Duration) *GetEntryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get entry params
func (o *GetEntryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get entry params
func (o *GetEntryParams) WithContext(ctx context.Context) *GetEntryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get entry params
func (o *GetEntryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get entry params
func (o *GetEntryParams) WithHTTPClient(client *http.Client) *GetEntryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get entry params
func (o *GetEntryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfNoneMatch adds the ifNoneMatch to the get entry params
func (o *GetEntryParams) WithIfNoneMatch(ifNoneMatch *string) *GetEntryParams {
	o.SetIfNoneMatch(ifNoneMatch)
	return o
}

// SetIfNoneMatch adds the ifNoneMatch to the get entry params
func (o *GetEntryParams) SetIfNoneMatch(ifNoneMatch *string) {
	o.IfNoneMatch = ifNoneMatch
}

// WithXRequestID adds the xRequestID to the get entry params
func (o *GetEntryParams) WithXRequestID(xRequestID *string) *GetEntryParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the get entry params
func (o *GetEntryParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithKey adds the key to the get entry params
func (o *GetEntryParams) WithKey(key string) *GetEntryParams {
	o.SetKey(key)
	return o
}

// SetKey adds the key to the get entry params
func (o *GetEntryParams) SetKey(key string) {
	o.Key = key
}

// WriteToRequest writes these params to a swagger request
func (o *GetEntryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.IfNoneMatch != nil {

		// header param If-None-Match
		if err := r.SetHeaderParam("If-None-Match", *o.IfNoneMatch); err != nil {
			return err
		}

	}

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}

	}

	// path param key
	if err := r.SetPathParam("key", o.Key); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
