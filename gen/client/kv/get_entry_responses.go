package kv

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/kvstore/gen/models"
)

// GetEntryReader is a Reader for the GetEntry structure.
type GetEntryReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *GetEntryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetEntryOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetEntryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetEntryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetEntryOK creates a GetEntryOK with default headers values
func NewGetEntryOK(writer io.Writer) *GetEntryOK {
	return &GetEntryOK{
		Payload: writer,
	}
}

/*GetEntryOK handles this case with default header values.

entry was found
*/
type GetEntryOK struct {
	/*The size of the entry
	 */
	ContentLength int64
	/*The content type of this entry
	 */
	ContentType string
	/*The version of this entry
	 */
	ETag string
	/*The time this entry was last modified
	 */
	LastModified string
	/*The request id this is a response to
	 */
	XRequestID string

	Payload io.Writer
}

func (o *GetEntryOK) Error() string {
	return fmt.Sprintf("[GET /kv/{key}][%d] getEntryOK  %+v", 200, o.Payload)
}

func (o *GetEntryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Length
	contentLength, err := swag.ConvertInt64(response.GetHeader("Content-Length"))
	if err != nil {
		return errors.InvalidType("Content-Length", "header", "int64", response.GetHeader("Content-Length"))
	}
	o.ContentLength = contentLength

	// response header Content-Type
	o.ContentType = response.GetHeader("Content-Type")

	// response header ETag
	o.ETag = response.GetHeader("ETag")

	// response header Last-Modified
	o.LastModified = response.GetHeader("Last-Modified")

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEntryNotFound creates a GetEntryNotFound with default headers values
func NewGetEntryNotFound() *GetEntryNotFound {
	return &GetEntryNotFound{}
}

/*GetEntryNotFound handles this case with default header values.

The entry was not found
*/
type GetEntryNotFound struct {
	/*The request id this is a response to
	 */
	XRequestID string

	Payload *models.Error
}

func (o *GetEntryNotFound) Error() string {
	return fmt.Sprintf("[GET /kv/{key}][%d] getEntryNotFound  %+v", 404, o.Payload)
}

func (o *GetEntryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEntryDefault creates a GetEntryDefault with default headers values
func NewGetEntryDefault(code int) *GetEntryDefault {
	return &GetEntryDefault{
		_statusCode: code,
	}
}

/*GetEntryDefault handles this case with default header values.

Error
*/
type GetEntryDefault struct {
	_statusCode int

	/*The request id this is a response to
	 */
	XRequestID string

	Payload *models.Error
}

// Code gets the status code for the get entry default response
func (o *GetEntryDefault) Code() int {
	return o._statusCode
}

func (o *GetEntryDefault) Error() string {
	return fmt.Sprintf("[GET /kv/{key}][%d] getEntry default  %+v", o._statusCode, o.Payload)
}

func (o *GetEntryDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
