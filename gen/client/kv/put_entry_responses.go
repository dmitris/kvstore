package kv

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/kvstore/gen/models"
)

// PutEntryReader is a Reader for the PutEntry structure.
type PutEntryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutEntryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPutEntryCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewPutEntryNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewPutEntryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPutEntryConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPutEntryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutEntryCreated creates a PutEntryCreated with default headers values
func NewPutEntryCreated() *PutEntryCreated {
	return &PutEntryCreated{}
}

/*PutEntryCreated handles this case with default header values.

entry was created
*/
type PutEntryCreated struct {
	/*The version of this entry
	 */
	Etag string
	/*the location to get the newly created entry
	 */
	Location strfmt.URI
	/*The request id this is a response to
	 */
	XRequestID string
}

func (o *PutEntryCreated) Error() string {
	return fmt.Sprintf("[PUT /kv/{key}][%d] putEntryCreated ", 201)
}

func (o *PutEntryCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Etag
	o.Etag = response.GetHeader("Etag")

	// response header Location

	location, err := formats.Parse("uri", response.GetHeader("Location"))
	if err != nil {
		return errors.InvalidType("Location", "header", "strfmt.URI", response.GetHeader("Location"))
	}
	o.Location = *(location.(*strfmt.URI))

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	return nil
}

// NewPutEntryNoContent creates a PutEntryNoContent with default headers values
func NewPutEntryNoContent() *PutEntryNoContent {
	return &PutEntryNoContent{}
}

/*PutEntryNoContent handles this case with default header values.

entry was updated
*/
type PutEntryNoContent struct {
	/*The version of this entry
	 */
	ETag string
	/*The request id this is a response to
	 */
	XRequestID string
}

func (o *PutEntryNoContent) Error() string {
	return fmt.Sprintf("[PUT /kv/{key}][%d] putEntryNoContent ", 204)
}

func (o *PutEntryNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header ETag
	o.ETag = response.GetHeader("ETag")

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	return nil
}

// NewPutEntryNotFound creates a PutEntryNotFound with default headers values
func NewPutEntryNotFound() *PutEntryNotFound {
	return &PutEntryNotFound{}
}

/*PutEntryNotFound handles this case with default header values.

The entry was not found
*/
type PutEntryNotFound struct {
	/*The request id this is a response to
	 */
	XRequestID string

	Payload *models.Error
}

func (o *PutEntryNotFound) Error() string {
	return fmt.Sprintf("[PUT /kv/{key}][%d] putEntryNotFound  %+v", 404, o.Payload)
}

func (o *PutEntryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutEntryConflict creates a PutEntryConflict with default headers values
func NewPutEntryConflict() *PutEntryConflict {
	return &PutEntryConflict{}
}

/*PutEntryConflict handles this case with default header values.

there is a version mismatch for the entry
*/
type PutEntryConflict struct {
	/*The request id this is a response to
	 */
	XRequestID string

	Payload *models.Error
}

func (o *PutEntryConflict) Error() string {
	return fmt.Sprintf("[PUT /kv/{key}][%d] putEntryConflict  %+v", 409, o.Payload)
}

func (o *PutEntryConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutEntryDefault creates a PutEntryDefault with default headers values
func NewPutEntryDefault(code int) *PutEntryDefault {
	return &PutEntryDefault{
		_statusCode: code,
	}
}

/*PutEntryDefault handles this case with default header values.

Error
*/
type PutEntryDefault struct {
	_statusCode int

	/*The request id this is a response to
	 */
	XRequestID string

	Payload *models.Error
}

// Code gets the status code for the put entry default response
func (o *PutEntryDefault) Code() int {
	return o._statusCode
}

func (o *PutEntryDefault) Error() string {
	return fmt.Sprintf("[PUT /kv/{key}][%d] putEntry default  %+v", o._statusCode, o.Payload)
}

func (o *PutEntryDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
