// Code generated by go-swagger; DO NOT EDIT.

package kv

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteEntryParams creates a new DeleteEntryParams object
// with the default values initialized.
func NewDeleteEntryParams() *DeleteEntryParams {
	var ()
	return &DeleteEntryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteEntryParamsWithTimeout creates a new DeleteEntryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteEntryParamsWithTimeout(timeout time.Duration) *DeleteEntryParams {
	var ()
	return &DeleteEntryParams{

		timeout: timeout,
	}
}

// NewDeleteEntryParamsWithContext creates a new DeleteEntryParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteEntryParamsWithContext(ctx context.Context) *DeleteEntryParams {
	var ()
	return &DeleteEntryParams{

		Context: ctx,
	}
}

// NewDeleteEntryParamsWithHTTPClient creates a new DeleteEntryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteEntryParamsWithHTTPClient(client *http.Client) *DeleteEntryParams {
	var ()
	return &DeleteEntryParams{
		HTTPClient: client,
	}
}

/*DeleteEntryParams contains all the parameters to send to the API endpoint
for the delete entry operation typically these are written to a http.Request
*/
type DeleteEntryParams struct {

	/*XRequestID
	  A unique UUID for the request

	*/
	XRequestID *string
	/*Key
	  The key for a given entry

	*/
	Key string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete entry params
func (o *DeleteEntryParams) WithTimeout(timeout time.Duration) *DeleteEntryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete entry params
func (o *DeleteEntryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete entry params
func (o *DeleteEntryParams) WithContext(ctx context.Context) *DeleteEntryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete entry params
func (o *DeleteEntryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete entry params
func (o *DeleteEntryParams) WithHTTPClient(client *http.Client) *DeleteEntryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete entry params
func (o *DeleteEntryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRequestID adds the xRequestID to the delete entry params
func (o *DeleteEntryParams) WithXRequestID(xRequestID *string) *DeleteEntryParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the delete entry params
func (o *DeleteEntryParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithKey adds the key to the delete entry params
func (o *DeleteEntryParams) WithKey(key string) *DeleteEntryParams {
	o.SetKey(key)
	return o
}

// SetKey adds the key to the delete entry params
func (o *DeleteEntryParams) SetKey(key string) {
	o.Key = key
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteEntryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}

	}

	// path param key
	if err := r.SetPathParam("key", o.Key); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
