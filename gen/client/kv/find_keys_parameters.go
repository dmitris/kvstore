package kv

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewFindKeysParams creates a new FindKeysParams object
// with the default values initialized.
func NewFindKeysParams() *FindKeysParams {
	var ()
	return &FindKeysParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewFindKeysParamsWithTimeout creates a new FindKeysParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewFindKeysParamsWithTimeout(timeout time.Duration) *FindKeysParams {
	var ()
	return &FindKeysParams{

		timeout: timeout,
	}
}

// NewFindKeysParamsWithContext creates a new FindKeysParams object
// with the default values initialized, and the ability to set a context for a request
func NewFindKeysParamsWithContext(ctx context.Context) *FindKeysParams {
	var ()
	return &FindKeysParams{

		Context: ctx,
	}
}

// NewFindKeysParamsWithHTTPClient creates a new FindKeysParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewFindKeysParamsWithHTTPClient(client *http.Client) *FindKeysParams {
	var ()
	return &FindKeysParams{
		HTTPClient: client,
	}
}

/*FindKeysParams contains all the parameters to send to the API endpoint
for the find keys operation typically these are written to a http.Request
*/
type FindKeysParams struct {

	/*XRequestID
	  A unique UUID for the request

	*/
	XRequestID *string
	/*Prefix*/
	Prefix *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the find keys params
func (o *FindKeysParams) WithTimeout(timeout time.Duration) *FindKeysParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the find keys params
func (o *FindKeysParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the find keys params
func (o *FindKeysParams) WithContext(ctx context.Context) *FindKeysParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the find keys params
func (o *FindKeysParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the find keys params
func (o *FindKeysParams) WithHTTPClient(client *http.Client) *FindKeysParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the find keys params
func (o *FindKeysParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRequestID adds the xRequestID to the find keys params
func (o *FindKeysParams) WithXRequestID(xRequestID *string) *FindKeysParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the find keys params
func (o *FindKeysParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithPrefix adds the prefix to the find keys params
func (o *FindKeysParams) WithPrefix(prefix *string) *FindKeysParams {
	o.SetPrefix(prefix)
	return o
}

// SetPrefix adds the prefix to the find keys params
func (o *FindKeysParams) SetPrefix(prefix *string) {
	o.Prefix = prefix
}

// WriteToRequest writes these params to a swagger request
func (o *FindKeysParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}

	}

	if o.Prefix != nil {

		// query param prefix
		var qrPrefix string
		if o.Prefix != nil {
			qrPrefix = *o.Prefix
		}
		qPrefix := qrPrefix
		if qPrefix != "" {
			if err := r.SetQueryParam("prefix", qPrefix); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
